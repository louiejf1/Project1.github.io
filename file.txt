<!DOCTYPE html>
<html lang="en" dir="ltr">
    <head>
        <meta charset="utf-8">
        <title> HEAT MAP </title>
    </head>
    <body>
        <div id='container' style='position: relative; height: 852px'>
            <canvas id="heatMap" width = "1472" height = "852" style="position:absolute; left: 0; top: 0"></canvas>
        </div>
        <img  id="map" src="./assets/map.jpg" style="display:none" alt="">
        <script  src="./node_modules/heatmap.js/build/heatmap.js" charset="utf-8"></script>
        <script type="text/javascript">
            
            this is the code for heatmap
            const canvas = document.getElementById('heatMap');
            const ctx = canvas.getContext('2d');
            const image = document.getElementById('map');
            console.log(image)
            function drawImageActualSize() {
              // Use the intrinsic size of image in CSS pixels for the canvas element
              canvas.width = this.naturalWidth;
              canvas.height = this.naturalHeight;
              ctx.drawImage(image, 0, 0, this.width, this.height);
            }
            image.onload = function(){
                console.log("loaded")
                drawImageActualSize()
            }
            //image.onload = drawImageActualSize
            var heatmap = h337.create({
                container: document.getElementById('container'),
                radius: 10,
                maxOpacity: .5,
                minOpacity: 0,
                blur: .75,
            });
            heatmap.setData({
              max: 5,
              data: [
                    { x: 9, y: 15, value: 5},
                    { x: 10, y: 15, value: 5},
                    { x: 11, y: 15, value: 5},
                    { x: 12, y: 15, value: 5},
                    { x: 13, y: 15, value: 5},
                    { x: 9, y: 16, value: 5},
                    { x: 10, y: 16, value: 5},
                    { x: 11, y: 16, value: 5},
                ]
            });
            heatmap.repaint()

            code ends here for heatmap
        </script>
    </body>
</html>



      //Width and height
      var w = 500;
      var h = 300;

      var margin = {
          top: 60,
          bottom: 40,
          left: 70,
          right: 40
        };

        var width = w - margin.left - margin.right;
        var height = h - margin.top - margin.bottom;

      
      // define map projection
      var projection = d3.geoAlbersUsa()
        .translate([w/2, h/2])
        .scale([500]);

      //Define default path generator
      var path = d3.geoPath()
        .projection(projection);

      var svg = d3.select("body")
        .append("svg")
        .attr("id", "chart")
        .attr("width", w)
        .attr("height", h)
        .append("g")
        .attr("tranform", "translate(0" + margin.left + "," + margin.top + ")");

        var color = d3.scaleQuantile()
          .range(["rgb(237, 248, 233)", "rgb(186, 228, 179)", "rgb(116,196,118)", "rgb(49,163,84)", "rgb(0,109,44)"]);

      d3.csv("us-cities-agriculture.csv", function(data){

        color.domain([ d3.min(data, function(d){ return d.value; }),
          d3.max(data, function(d){ return d.value; })
          ]);

      d3.json("us-states.json", function(json){

        //Merge the agriculture and GeoJSON data
        //Loop through once for each agriculture data value
        for(var i = 0; i < data.length; i++){
          // grab state name
          var dataState = data[i].state;

          //grab data value, and convert from string to float
          var dataValue = parseFloat(data[i].value);

          //find the corresponding state inside the GeoJSON
          for(var n = 0; n < json.features.length; n++){

            // properties name gets the states name
            var jsonState = json.features[n].properties.name;
            // if statment to merge by name of state
            if(dataState == jsonState){
              //Copy the data value into the JSON
              // basically creating a new value column in JSON data
              json.features[n].properties.value = dataValue;

              //stop looking through the JSON
              break;
            }
          }
        }

        svg.selectAll("path")
          .data(json.features)
          .enter()
          .append("path")
          .attr("d", path)
          .style("fill", function(d){
            //get the data value
            var value = d.properties.value;

            if(value){
              //If value exists
              return color(value);
            } else {
              // If value is undefined
              //we do this because alaska and hawaii are not in dataset we are using but still in projections
              return "#ccc"
            }

          });


      });

})


});
